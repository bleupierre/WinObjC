diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8aa44bb..bea0eca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -291,7 +291,15 @@ endif(NOT NOT_NEED_LIBNSL)
 check_function_exists(gethostname HAVE_GETHOSTNAME)
 
 if(WIN32)
-  check_library_exists_concat("ws2_32" getch        HAVE_LIBWS2_32)
+  # Bypass check_library_exists test for Windows 8.1 as getch is not a supported API
+  # Assume ws2_32 lib exists in Windows 8.1, Windows Phone 8.1
+  if((CMAKE_SYSTEM_VERSION STREQUAL "8.1") AND ((CMAKE_SYSTEM_NAME STREQUAL "WindowsStore") OR (CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone")))
+    set(HAVE_LIBWS2_32 1)
+    list(APPEND CURL_LIBS ws2_32)
+  else()
+    check_library_exists_concat("ws2_32" getch        HAVE_LIBWS2_32)
+  endif()
+
   check_library_exists_concat("winmm"  getch        HAVE_LIBWINMM)
 endif()
 
@@ -989,10 +997,18 @@ include(CMake/OtherTests.cmake)
 
 add_definitions(-DHAVE_CONFIG_H)
 
-# For windows, do not allow the compiler to use default target (Vista).
-if(WIN32)
+if((CMAKE_SYSTEM_NAME STREQUAL "WindowsStore") OR (CMAKE_SYSTEM_NAME STREQUAL "WindowsPhone"))
+  add_definitions(-DHAVE_STRUCT_POLLFD -D_WINSOCK_DEPRECATED_NO_WARNINGS)
+  # Set correct winnt version
+  if(CMAKE_SYSTEM_VERSION STREQUAL "10.0")
+    add_definitions(-D_WIN32_WINNT=0x0A00)
+  elseif(CMAKE_SYSTEM_VERSION STREQUAL "8.1")
+    add_definitions(-D_WIN32_WINNT=0x0603)
+  endif()
+elseif(WIN32)
+  # For windows, do not allow the compiler to use default target (Vista).
   add_definitions(-D_WIN32_WINNT=0x0501)
-endif(WIN32)
+endif()
 
 if(MSVC)
   add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
diff --git a/lib/connect.c b/lib/connect.c
index 7202fa6..0ae2712 100644
--- a/lib/connect.c
+++ b/lib/connect.c
@@ -948,6 +948,9 @@ void Curl_sndbufset(curl_socket_t sockfd)
       if(osver.dwMajorVersion >= majorVersion)
         detectOsState = DETECT_OS_VISTA_OR_LATER;
     }
+#elif defined(_WIN32_WINNT) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) && defined(WINAPI_FAMILY) && \
+    ((WINAPI_FAMILY == WINAPI_FAMILY_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
+    // Do nothing since VerSetConditionMask & VerifyVersionInfo API are not supported in Windows Apps environment.
 #else
     ULONGLONG majorVersionMask;
     OSVERSIONINFOEX osver;
diff --git a/lib/getenv.c b/lib/getenv.c
index 36215aa..4807a8f 100644
--- a/lib/getenv.c
+++ b/lib/getenv.c
@@ -30,7 +30,9 @@
 static
 char *GetEnv(const char *variable)
 {
-#ifdef _WIN32_WCE
+#if defined _WIN32_WCE || \
+  (defined(_WIN32_WINNT) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) && \
+  defined(WINAPI_FAMILY) && ((WINAPI_FAMILY == WINAPI_FAMILY_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)))
   return NULL;
 #else
 #ifdef WIN32
diff --git a/lib/smb.c b/lib/smb.c
index d461a71..939f04e 100644
--- a/lib/smb.c
+++ b/lib/smb.c
@@ -352,7 +352,15 @@ static void smb_format_message(struct connectdata *conn, struct smb_header *h,
   h->flags2 = smb_swap16(SMB_FLAGS2_IS_LONG_NAME | SMB_FLAGS2_KNOWS_LONG_NAME);
   h->uid = smb_swap16(smbc->uid);
   h->tid = smb_swap16(req->tid);
+
+#if defined(_WIN32_WINNT) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) && defined(WINAPI_FAMILY) && \
+  ((WINAPI_FAMILY == WINAPI_FAMILY_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
+  // Use Windows specific API when building for Windows Apps as getpid() is not a supported API
+  pid = GetCurrentProcessId();
+#else
   pid = getpid();
+#endif
+
   h->pid_high = smb_swap16((unsigned short)(pid >> 16));
   h->pid = smb_swap16((unsigned short) pid);
 }
diff --git a/lib/strerror.c b/lib/strerror.c
index cbc5c47..7a91412 100644
--- a/lib/strerror.c
+++ b/lib/strerror.c
@@ -634,7 +634,9 @@ const char *Curl_strerror(struct connectdata *conn, int err)
 
 #ifdef USE_WINSOCK
 
-#ifdef _WIN32_WCE
+#if defined _WIN32_WCE || \
+  (defined(_WIN32_WINNT) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) && \
+  defined(WINAPI_FAMILY) && ((WINAPI_FAMILY == WINAPI_FAMILY_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)))
   {
     wchar_t wbuf[256];
     wbuf[0] = L'\0';
@@ -1079,7 +1081,9 @@ const char *Curl_sspi_strerror (struct connectdata *conn, int err)
              txt, (err >> 16) & 0xffff, err & 0xffff);
     txtbuf[sizeof(txtbuf)-1] = '\0';
 
-#ifdef _WIN32_WCE
+#if defined _WIN32_WCE || \
+  (defined(_WIN32_WINNT) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT >= _WIN32_WINNT_WINBLUE) && \
+  defined(WINAPI_FAMILY) && ((WINAPI_FAMILY == WINAPI_FAMILY_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)))
     {
       wchar_t wbuf[256];
       wbuf[0] = L'\0';
diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index d1ea5fb..6a6d474 100644
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -1485,7 +1485,7 @@ static void ssl_tls_trace(int direction, int ssl_ver, int content_type,
   char ssl_buf[1024];
   char unknown[32];
   int msg_type, txt_len;
-  const char *verstr;
+  const char *verstr = 0;
   struct connectdata *conn = userp;
 
   if(!conn || !conn->data || !conn->data->set.fdebug ||
